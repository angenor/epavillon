-- Script de diagnostic complet pour identifier le probl√®me RLS sur activities
-- Ex√©cutez ce script dans Supabase SQL Editor pour diagnostiquer le probl√®me

-- ===== √âTAPE 1: √âTAT G√âN√âRAL DE LA TABLE =====
SELECT 
    '=== √âTAT DE LA TABLE ACTIVITIES ===' as section;

-- V√©rifier si RLS est activ√©
SELECT 
    'RLS Status:' as info,
    CASE 
        WHEN rowsecurity THEN 'ACTIV√â ‚úì' 
        ELSE 'D√âSACTIV√â ‚úó' 
    END as valeur
FROM pg_tables 
WHERE tablename = 'activities' AND schemaname = 'public';

-- ===== √âTAPE 2: AUDIT DES POLITIQUES EXISTANTES =====
SELECT 
    '=== POLITIQUES RLS EXISTANTES ===' as section;

SELECT 
    policyname as "Nom de la politique",
    cmd as "Type",
    CASE cmd 
        WHEN 'SELECT' THEN 'Lecture'
        WHEN 'INSERT' THEN 'Cr√©ation' 
        WHEN 'UPDATE' THEN 'Modification ‚Üê IMPORTANT'
        WHEN 'DELETE' THEN 'Suppression'
        ELSE cmd 
    END as "Op√©ration",
    qual as "Condition USING",
    with_check as "Condition WITH CHECK",
    CASE 
        WHEN cmd = 'UPDATE' THEN 'üîç POLITIQUE CRITIQUE'
        ELSE ''
    END as "Notes"
FROM pg_policies 
WHERE tablename = 'activities' AND schemaname = 'public'
ORDER BY 
    CASE cmd 
        WHEN 'UPDATE' THEN 1  -- UPDATE en premier
        WHEN 'SELECT' THEN 2
        WHEN 'INSERT' THEN 3
        WHEN 'DELETE' THEN 4
    END, policyname;

-- ===== √âTAPE 3: V√âRIFICATION SP√âCIFIQUE UPDATE =====
SELECT 
    '=== V√âRIFICATION POLITIQUE UPDATE ===' as section;

SELECT 
    CASE 
        WHEN COUNT(*) > 0 THEN '‚úì Politique UPDATE trouv√©e'
        ELSE '‚úó AUCUNE politique UPDATE trouv√©e'
    END as "R√©sultat diagnostic",
    COUNT(*) as "Nombre de politiques UPDATE"
FROM pg_policies 
WHERE tablename = 'activities' AND schemaname = 'public' AND cmd = 'UPDATE';

-- ===== √âTAPE 4: DIAGNOSTIC DE L'ACTIVIT√â CIBLE =====
SELECT 
    '=== DIAGNOSTIC DE L''ACTIVIT√â CIBLE ===' as section;

-- Informations sur l'activit√© sp√©cifique
SELECT 
    'Activit√© ID:' as info,
    id as valeur
FROM activities 
WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320'
UNION ALL
SELECT 
    'Propri√©taire:' as info,
    submitted_by as valeur
FROM activities 
WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320'
UNION ALL
SELECT 
    'Titre actuel:' as info,
    title as valeur
FROM activities 
WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320'
UNION ALL
SELECT 
    'Derni√®re modification:' as info,
    updated_at::text as valeur
FROM activities 
WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320';

-- ===== √âTAPE 5: UTILISATEUR ACTUEL =====
SELECT 
    '=== UTILISATEUR ACTUEL ===' as section;

SELECT 
    'auth.uid():' as info,
    auth.uid()::text as valeur
UNION ALL
SELECT 
    'Utilisateur connect√©:' as info,
    CASE 
        WHEN auth.uid() IS NOT NULL THEN '‚úì Connect√©'
        ELSE '‚úó Non connect√©'
    END as valeur;

-- ===== √âTAPE 6: V√âRIFICATION DE PROPRI√âT√â =====
SELECT 
    '=== V√âRIFICATION DE PROPRI√âT√â ===' as section;

SELECT 
    'L\'utilisateur est-il propri√©taire:' as test,
    CASE 
        WHEN submitted_by = auth.uid() THEN '‚úì OUI - Propri√©taire'
        WHEN submitted_by IS NULL THEN '? Activit√© non trouv√©e'
        WHEN auth.uid() IS NULL THEN '‚úó Utilisateur non connect√©'
        ELSE '‚úó NON - Pas le propri√©taire'
    END as resultat,
    'Propri√©taire: ' || COALESCE(submitted_by::text, 'NULL') as details,
    'Utilisateur actuel: ' || COALESCE(auth.uid()::text, 'NULL') as utilisateur
FROM activities 
WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320';

-- ===== √âTAPE 7: TEST D'UPDATE DIRECT =====
SELECT 
    '=== TEST D''UPDATE DIRECT ===' as section;

-- Pr√©parer le test
DO $$
DECLARE
    test_title TEXT := 'TEST DIAGNOSTIC - ' || NOW()::text;
    rows_affected INTEGER;
BEGIN
    -- Tentative d'update
    UPDATE activities 
    SET title = test_title,
        updated_at = NOW()
    WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320';
    
    -- Obtenir le nombre de lignes affect√©es
    GET DIAGNOSTICS rows_affected = ROW_COUNT;
    
    -- Afficher le r√©sultat
    RAISE NOTICE '=== R√âSULTAT DU TEST D''UPDATE ===';
    RAISE NOTICE 'Titre de test: %', test_title;
    RAISE NOTICE 'Lignes affect√©es: %', rows_affected;
    
    IF rows_affected > 0 THEN
        RAISE NOTICE '‚úì UPDATE R√âUSSI';
    ELSE
        RAISE NOTICE '‚úó UPDATE √âCHOU√â - Aucune ligne modifi√©e';
        RAISE NOTICE 'Causes possibles:';
        RAISE NOTICE '1. Politique RLS bloque l''op√©ration';
        RAISE NOTICE '2. Utilisateur non propri√©taire';
        RAISE NOTICE '3. Activit√© inexistante';
        RAISE NOTICE '4. Probl√®me de permissions';
    END IF;
END $$;

-- ===== √âTAPE 8: V√âRIFICATION FINALE =====
SELECT 
    '=== V√âRIFICATION FINALE ===' as section;

SELECT 
    'Titre actuel apr√®s test:' as info,
    title as valeur,
    'Modifi√© le:' as derniere_modif,
    updated_at::text as horodatage
FROM activities 
WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320';

-- ===== R√âSUM√â DIAGNOSTIC =====
SELECT 
    '=== R√âSUM√â DIAGNOSTIC ===' as section;

SELECT 
    'NEXT STEPS:' as action_requise,
    CASE 
        WHEN NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'activities' AND cmd = 'UPDATE') THEN
            '1. Ex√©cuter fix_activities_update_policies.sql pour cr√©er la politique UPDATE'
        WHEN NOT EXISTS (SELECT 1 FROM activities WHERE id = 'cb5c4d81-cc1f-4442-a195-080eb43ea320') THEN
            '1. V√©rifier que l''activit√© existe avec le bon ID'
        WHEN auth.uid() IS NULL THEN
            '1. Se connecter avec un utilisateur valide'
        ELSE
            '1. V√©rifier les logs ci-dessus pour identifier le probl√®me sp√©cifique'
    END as recommendation;